use crate::ast;
use crate::codegen::output::*;
use crate::codegen::Result;

use std::fmt::Write;
use std::fs::File;
use std::time::Instant;

mod prelude;

mod ir;
use ir::*;

pub struct Generator {
    #[allow(unused)]
    target: ast::RustTarget,
}

impl Generator {
    pub fn new(target: ast::RustTarget) -> Self {
        Self { target }
    }
}

impl super::Generator for Generator {
    fn emit_workspace(&self, workspace: &ast::Workspace) -> Result {
        for member in workspace.members.values() {
            self.emit(workspace, member)?;
        }

        {
            let mod_path = workspace.dir.join("mod.rs");
            let mut output = Scope::writer(File::create(&mod_path)?);
            let mut s = Scope::new(&mut output);
            self.write_prelude(&mut s);

            for member in workspace.members.values() {
                writeln!(s, "pub mod {};", member.name)?;
            }
        }

        Ok(())
    }
}

impl Generator {
    fn write_prelude<'a>(&self, s: &mut Scope<'a>) {
        s.line("// This file is generated by lavish: DO NOT EDIT");
        s.line("// https://github.com/fasterthanlime/lavish");
        s.lf();
        s.line("#![cfg_attr(rustfmt, rustfmt_skip)]");
        s.line("#![allow(clippy::all, unknown_lints, unused, non_snake_case)]");
        s.lf();
    }

    fn emit(&self, workspace: &ast::Workspace, member: &ast::WorkspaceMember) -> Result {
        let start_instant = Instant::now();

        let output_path = workspace.dir.join(&member.name).join("mod.rs");
        std::fs::create_dir_all(output_path.parent().unwrap())?;
        let mut output = Scope::writer(File::create(&output_path)?);
        let mut scope = Scope::new(&mut output);
        let s = &mut scope;
        self.write_prelude(s);

        let schema = member.schema.as_ref().expect("schema to be parsed");
        let stack = ast::Stack::new(schema);
        let body = stack.anchor(&schema.body);

        {
            s.line("pub use schema::*;");
            s.lf();
        }

        {
            s.write(Protocol { body: body.clone() });
            s.lf();
        }

        {
            write!(s, "pub mod schema").unwrap();
            s.in_block(|s| {
                s.write(Symbols::new(body.clone()));
            });
            s.lf();
        }

        let end_instant = Instant::now();
        println!(
            "Generated {:?} in {:?}",
            output_path,
            end_instant.duration_since(start_instant)
        );

        Ok(())
    }
}
